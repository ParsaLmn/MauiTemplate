<div class="form-group @Class">
    <label @onclick="FloatLabelClick" class="form-group-label @LabelClass @_labelClass">@Label</label>

    @if (InputType == "text" || InputType == "email" || InputType == "tel" || InputType == "password")
    {
        <input @ref="textInput" @bind-value="TextValue" type="@InputType" @onfocus="FloatInputFocus" @onfocusout="FloatInputFocusOut"
               class="form-group-input form-control @InputClass" />
    }
    else if (InputType == "number")
    {
        <input @ref="textInput" @bind-value="NumberValue" type="@InputType" @onfocus="FloatInputFocus" @onfocusout="FloatInputFocusOut"
               class="form-group-input form-control @InputClass" />
    }
    else
    {
        <small class="text-danger">Input type not support</small>
    }
</div>

@code {
    private string textValue;
    [Parameter]
    public string TextValue
    {
        get { return textValue; }
        set
        {
            if (textValue == value) return;
            textValue = value;
            TextValueChanged.InvokeAsync(TextValue);
        }
    }
    [Parameter]
    public EventCallback<string> TextValueChanged { get; set; } = default!;

    private int numberValue;
    [Parameter]
    public int NumberValue
    {
        get { return numberValue; }
        set
        {
            if (numberValue == value) return;
            numberValue = value;
            NumberValueChanged.InvokeAsync(NumberValue);
        }
    }
    [Parameter]
    public EventCallback<int> NumberValueChanged { get; set; }


    [Parameter]
    public string InputType { get; set; } = "text";
    [Parameter, EditorRequired]
    public string Label { get; set; } = default!;
    [Parameter]
    public string Class { get; set; } = default!;
    [Parameter]
    public string InputClass { get; set; } = default!;
    [Parameter]
    public string LabelClass { get; set; } = default!;

    string _labelClass = "";
    ElementReference textInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(TextValue) || NumberValue != default)
            {
                FloatInputFocus();
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void FloatInputFocus()
    {
        _labelClass = "floated-label";
    }
    private void FloatInputFocusOut()
    {
        if (!string.IsNullOrEmpty(TextValue) || NumberValue != default)
        {
            FloatInputFocus();
            return;
        }
        _labelClass = "";
    }

    private void FloatLabelClick()
    {
        textInput.FocusAsync();
    }
}